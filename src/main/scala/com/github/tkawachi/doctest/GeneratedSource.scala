package com.github.tkawachi.doctest

import java.io.File

import sbt.IO

/**
 * A source file that's been generated by the routes compiler
 */
trait GeneratedSource {

  /**
   * The original source file associated with this generated source file, if known
   */
  def source: Option[File]

  /**
   * Map the generated line to the original source file line, if known
   */
  def mapLine(generatedLine: Int): Option[Int]
}

object GeneratedSource {

  val MARKER: String = "// @GENERATOR:sbt-doctest"

  val SOURCE_PREFIX: String = "// @SOURCE:"

  val LINE_PREFIX: String = "// @LINE:"

  private val LineMarker = s"\\s*$LINE_PREFIX\\s*(\\d+)\\s*".r

  def unapply(file: File): Option[GeneratedSource] = {

    val lines: List[String] = if (file.exists) {
      IO.readLines(file)
    } else {
      List.empty[String]
    }

    if (lines.contains(MARKER)) {
      Some(new GeneratedSource {
        val source: Option[File] =
          lines
            .find(_.startsWith(SOURCE_PREFIX))
            .map(m => new File(m.trim.drop(SOURCE_PREFIX.size)))

        def mapLine(generatedLine: Int): Option[Int] = {
          lines.view.take(generatedLine).reverse.collectFirst {
            case LineMarker(line) => Integer.parseInt(line)
          }
        }
      })
    } else {
      None
    }
  }
}
