> set doctestTestFramework := DoctestTestFramework.ScalaTest
> + test:managedSources
$ exists target/scala-2.11/src_managed/test/sbt_doctest/MainDoctest.scala
$ exists target/scala-2.12/src_managed/test/sbt_doctest/MainDoctest.scala
$ absent target/scala-2.11/src_managed/test/sbt_doctest/NoDoctestDoctest.scala
$ absent target/scala-2.12/src_managed/test/sbt_doctest/NoDoctestDoctest.scala
$ exists target/scala-2.11/src_managed/test/sbt_doctest/VerbatimTestDoctest.scala
$ exists target/scala-2.12/src_managed/test/sbt_doctest/VerbatimTestDoctest.scala
$ exists target/scala-2.11/src_managed/test/READMEDoctest.scala
$ exists target/scala-2.12/src_managed/test/READMEDoctest.scala
> + test:compile
> + test

# Try with specs2
> set doctestTestFramework := DoctestTestFramework.Specs2
> clean
> + test

# Try with scalacheck
> set doctestTestFramework := DoctestTestFramework.ScalaCheck
> clean
> + test

# Try with utest
#> set doctestTestFramework := DoctestTestFramework.utest
#> set testFrameworks += new TestFramework("utest.runner.Framework")
#> clean
#> + test
